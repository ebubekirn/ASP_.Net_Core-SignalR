@{
	ViewData["Title"] = "Home Page";
}

@section Scripts
	{
	<script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>

	<script type="text/javascript">

		$(document).ready(() => {
			//var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withUrl("https://localhost:7290/MyHub").build()

			var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect().withUrl("https://localhost:7290/MyHub").build() // => withAutomaticReconnect ile kullanmak istersek bunu yapmalıyız.

			statusShow();
			Start();

			// Functions
			function statusShow() {
				$("#conStatus").text(connection.connectionState);
			}

			function Start() {
				connection.start().then(() => {
					statusShow();
					$("#loading").hide();

					//connection.invoke("GetNames");

					connection.invoke("GetNamesByGroup");

				}).catch((err) => {
					console.log(err)
					setTimeout(() => start(), 2000)
				});
			}

			statusShow();

			//Subscribes
			connection.onreconnecting(err => {
				$("#loading").show();
				statusShow();
				console.log("onreconnection: " + err);
			})

			connection.onreconnected(connectionId => {
				$("#loading").hide();
				statusShow();
			})

			connection.onclose(() => {
				$("#loading").hide();
				statusShow();
				Start();
			})

			connection.on("ReceiveClientCount", (clientCount) => {
				$("#clientCount").text(clientCount)
			})

			connection.on("Notify", (countText) => {
				$("#notify").html(`<div class="alert alert-success">${countText}</div>`)
			})

			connection.on("Error", (errorText) => {
				alert(errorText);
			})

			connection.on("ReceiveNames", (names) => {
				$("#nameList").empty();

				names.forEach((item, index) => {
					$("#nameList").append(`<li class="list-group-item">${item}</li>`)
				})
			})

			connection.on("ReceiveName", (name) => {
				$("#nameList").append(`<li class="list-group-item">${name}</li>`)
			})

			connection.on("ReceiveMessageByGroup", (name, teamId) => {
				let listName
				if (teamId == 1)
					listName = "ATeamList"
				else
					listName = "BTeamList"
				$(`#${listName}`).append(`<li class="list-group-item">${name}</li>`)
			})

			connection.on("ReceiveNamesByGroup", (teams) => {
				console.log(teams);
				teams.forEach((team, index) => {
					let listName
					if (team.teamId == 1)
						listName = "ATeamList"
					else
						listName = "BTeamList"

					team.users.forEach((user, index2) => {
						$(`#${listName}`).append(`<li class="list-group-item">${user.name}</li>`)
					})
				})
			})

			connection.on("ReceiveProduct", (product) => {
				console.log(product);
			})

			// Clicks

			$("#btnProduct").click(() => {
				let product = {"Id": 1, "Name": "Kalem", "Price":100, "Stock": 200};

				connection.invoke("SendProduct", product);
			})
			$("#btnNameSave").click(() => {
				connection.invoke("SendMessage", $("#txtName").val()).catch((err) => console.log(err))
				// invoke server daki metodu çağırmamızı sağlar.
			})

			$("#btnNameTeam").click(() => {
				let name = $("#txtName").val();
				let teamName = $("input[type=radio]:checked").val();

				if(teamName == null){
					alert("Takım seçiniz!")
					return;
				}

				connection.invoke("SendNameByGroup", name, teamName).catch((err) => console.log(err))
			})

			$("input[type=radio]").change(() => {
				let value = $(`input[type=radio]:checked`).val();

				if (value == "Team A") {
					connection.invoke("AddToGroup", value);

					connection.invoke("RemoveToGroup", "Team B");
				} else {
					connection.invoke("AddToGroup", value);

					connection.invoke("RemoveToGroup", "Team A");
				}
			})

		})

	</script>
}
<div class="row">

	<div class="col-md-8 offset-2">

		<input type="text" class="form-control" id="txtName" />
		<hr />
		<button class="btn btn-primary" id="btnNameSave">İsim Kaydet</button>
		<button class="btn btn-warning" id="btnNameTeam">İsim Kaydet(Takım)</button>
		<button class="btn btn-danger" id="btnProduct">Ürün Gönder</button>

		<div class="alert alert-info mt-2">
			<div class="float-lg-start">
				Bağlantı Durumu: <strong id="conStatus"></strong>
				, Client Sayısı: <strong id="clientCount"></strong>
			</div>

			<div class="float-lg-end">
				<div id="loading" class="spinner-border" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			</div>
			<div class="clearfix"></div>
		</div>
		<div id="notify"></div>
	</div>

</div>
<div class="row">

	<div class="col-md-8 offset-md-2">
		<div class="form-check form-check-inline">
			<input class="form-check-input" id="TeamA" type="radio" name="TeamGroup" value="Team A" />
			<label class="form-check-label" for="TeamA">A Takımı</label>
		</div>
		<div class="form-check form-check-inline">
			<input class="form-check-input" id="TeamB" type="radio" name="TeamGroup" value="Team B" />
			<label class="form-check-label" for="TeamB">B Takımı</label>
		</div>
	</div>

	<div class="col-md-8 offset-2">
		<div class="row">
			<div class="col-md-6">
				<h2>A TAKIMI</h2>
				<ul class="list-group" id="ATeamList"></ul>
			</div>
			<div class="col-md-6">
				<h2>B TAKIMI</h2>
				<ul class="list-group" id="BTeamList"></ul>
			</div>
		</div>
	</div>
</div>
